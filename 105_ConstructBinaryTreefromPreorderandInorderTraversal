// 4/10/2017

Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.


 /*
 To determine preStart for the right sub-tree, we have to move towards the right of the preOrder array by a certain 'offset' value. This means we are skipping the next 'offset' number of indexes in the preOrder array to find the root of the right sub-tree.
This offset is determined by finding the size of the left sub-tree which is equal to the no. of indexes to the left of root found the inOrder array. Just think of (inIndex - inStart) as this offset. In other words, offset = ( inIndex - inStart ) .

Therefore the preStart for the right sub-tree is = preStart + offset + 1

It will be simpler if you draw the problem on a paper and iterate for this example:
Inorder sequence: D B E A F C
Preorder sequence: A B D E C F
 */

public TreeNode buildTree(int[] preorder, int[] inorder) {
    if (preorder.length != inorder.length || preorder.length == 0) {
        return null;
    }
    return helper(preorder, inorder, 0, 0, inorder.length-1);
}
private TreeNode helper(int[] preorder, int[] inorder, int preorderIdx, int start, int end) {
    if (start > end) {
        return null;
    }
    TreeNode node = new TreeNode(preorder[preorderIdx]);
    int inorderIdx = -1;
    
    for (int i = start; i <= end; i++) {
        if (inorder[i] == preorder[preorderIdx]) {
            inorderIdx = i;
            break;
        }
    }
    int leftTreeSize = inorderIdx-start;
    node.left = helper(preorder, inorder, preorderIdx+1, start, inorderIdx-1);
    node.right = helper(preorder, inorder, preorderIdx+1+leftTreeSize, inorderIdx+1, end);
    return node;
}