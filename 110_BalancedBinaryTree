// 3/16/2017
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

public boolean isBalanced(TreeNode root) {
    if (root == null) {
        return true;
    }
    int left = helper(root.left);
    int right = helper(root.right);
    return (Math.abs(left - right) <= 1) && isBalanced(root.left) && isBalanced(root.right);
}

private int helper(TreeNode root) {
    if (root == null) {
        return 0;
    }
    int left = helper(root.left);
    int right = helper(root.right);
    int depth = Math.max(left, right) + 1;
    return depth;
}

// 5/2/2017

public boolean isBalanced(TreeNode root) {
    if (root == null) {
        return true;
    }
    int left = helper(root.left);
    int right = helper(root.right);
    int diff = Math.abs(left - right);
    // need to check if the left and right are both balanced
    return (diff <= 1) && isBalanced(root.left) && isBalanced(root.right);
}
// return the max depth of subtree
private int helper(TreeNode root) {
    if (root == null) {
        return 0;
    }
    return Math.max(helper(root.left), helper(root.right)) + 1;
}