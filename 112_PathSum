// 3/2/2017

Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.


public boolean hasPathSum(TreeNode root, int sum) {
	if (root == null)
		return false;

	if (root.left == null & root.right == null)
		return root.val == sum;

	return (hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val));
}

// 3/13/2017
// second attempt

public boolean hasPathSum(TreeNode root, int sum) {
    boolean result = false;;
    if (root == null) {
        return false;
    }
    if (root != null) {
        result = helper(root, 0, sum);
        System.out.print(result);
    } 
    return result;
}
private boolean helper (TreeNode root, int add, int sum) {
    if (root.left == null && root.right == null) {
        add += root.val;
        return (sum == add);
    }
    if (root.left != null) {
        if(helper(root.left, add + root.val, sum)) return true;
    }
    if (root.right != null) {
        if(helper(root.right, add + root.val, sum)) return true;
    }
    return false;
}