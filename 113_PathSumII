// 3/2/2017


Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]


private List<List<Integer>> result = new ArrayList<List<Integer>>();

public List<List<Integer>> pathSum(TreeNode root, int sum) {
    List<Integer> list = new ArrayList<>();
    helper(root, sum, 0, list);
    return result;
}

private void helper(TreeNode root, int sum, int val, List<Integer> list) {
	if (root == null)
		return;

	list.add(root.val);
	val+= root.val;

	if (sum == val && root.left == null && root.right == null) {
		result.add(list);
	} else {
		helper(root.left, sum, val, new ArrayList<>(list));
		helper(root.right, sum, val, new ArrayList<>(list));
	}
}










