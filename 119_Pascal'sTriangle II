// 4//6/2017

Given an index k, return the kth row of the Pascal's triangle.

For example, given k = 3,
Return [1,3,3,1].

Note:
Could you optimize your algorithm to use only O(k) extra space?

/* https://discuss.leetcode.com/topic/39745/java-o-k-solution-with-explanation
When generating each row, we can use the previous row directly, so this way we only use O(k) space with k being the number of row. For each new row, we append a 1, letting j iterate from i - 1 backward to 1, and set the jth element as res.set(j, res.get(j-1) + res.get(j)). For example, when k = 4, the process goes like this:

k == 0
[1] 
k == 1
[11] 
k == 2
[111]  add 1
[121]  calculate jth spot
k == 3
[1211]  add 1
[1331]   calculate jth spot
k == 4
[13311]  add 1
[14641]  calculate jth spot

*/

public List<Integer> getRow(int rowIndex) {
    List<Integer> answer = new ArrayList<>();
    if (rowIndex < 0) {
        return answer;
    }
    for (int row = 0; row <= rowIndex;row++) {
        answer.add(1); // append 1 at the end
        for (int col = row - 1; col >= 1;col--) {
            answer.set(col, answer.get(col) + answer.get(col-1));
        }
    }
    return answer;
}