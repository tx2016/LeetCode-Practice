// 1/20/2017

Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]

// First attemp, answer contains duplicate [[2,-1,-1],[0,1,-1],[-1,0,1]].
// Need to find a way to remove the duplicated list
public List<List<Integer>> threeSum(int[] nums) {
	if (nums == null)
		return null;
	List<List<Integer>> answer = new ArrayList<List<Integer>>();
	Map<Integer, Integer> map = new HashMap<Integer, Integer>();
	for (int i = 0; i < nums.length; i++) {
		map.put(nums[i], i);
	}
	for (int i = 0; i < nums.length - 1; i++) {
		int head = nums[i];
		int subTarget = 0 - head;
		int subHead = nums[i + 1];
		int diff = subTarget - subHead;
		if (map.containsKey(diff) && map.get(diff) != i) {
			answer.add(Arrays.asList(head, subHead, nums[map.get(diff)]));
		}
	}	
	return answer;
}

// Second attemp after peeking at one solution
public List<List<Integer>> threeSum(int[] nums) {
	if (nums == null)
		return null;
	List<List<Integer>> answer = new ArrayList<List<Integer>>();
	
	// Sort the original array
	Arrays.sort(nums);
	
	for (int i = 0; i < nums.length; i++) {
		int left = i + 1;
		int right = nums.length - 1;

		if (i >= 1 && nums[i] == nums[i - 1])
			continue; // Skip to the i++ update
		while (left < right) {
			int sum = nums[i] + nums[left] + nums[right];
			if (sum < 0) {
				left++;
			} else if (sum > 0){
				right--;
			} else {
				answer.add(Arrays.asList(nums[i], nums[left], nums[right]));
				// If the value of the left pointer equals the value of the right to the left pointer, move to the right to avoid the duplicate
				while (nums[left] == nums[left + 1] && left + 1 < right)
					left++;
				while (nums[right] == nums[right - 1] && right - 1 > left)
					right--;
				left++;
				right--;
			}
		}
	}
	return answer;
}