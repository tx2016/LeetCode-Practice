// 3/10/2017

Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Note: Do not modify the linked list.

Follow up:
Can you solve it without using extra space?

public ListNode detectCycle(ListNode head) {
    if (head == null) {
        return null;
    }
    ListNode fast = head;
    ListNode slow = head;
    while (fast.next != null && fast.next.next != null) {
        fast = fast.next.next;
        slow = slow.next;
        if (fast == slow) {
            fast = head; //
            break; // found the meeting point in the loop
        }
    }
    
    // No loop detected
    if (fast.next == null || fast.next.next == null) {
        return null;
    }
    
    
    while (fast != slow) {
        fast = fast.next;
        slow = slow.next;
    }
    return slow;
}