// 3/16/2017

Given a binary tree, return the preorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,2,3].

Note: Recursive solution is trivial, could you do it iteratively?

// recursive
public List<Integer> preorderTraversal(TreeNode root) {
    List<Integer> list = new ArrayList<Integer>();
	if (root == null) {
        return list;
    }
    helper(root, list);
    return list;
}

private void helper(TreeNode root, List<Integer> list) {
    if (root == null) {
        return;
    }
    list.add(root.val);
    helper(root.left, list);
    helper(root.right, list);
}

// iterative
public List<Integer> preorderTraversal(TreeNode root) {
    List<Integer> list = new ArrayList<Integer>();
    if (root == null) {
		return list;
	}
    Stack <TreeNode> s = new Stack<TreeNode>();
    s.push(root);
    while (!s.isEmpty()) {
    	TreeNode cur = s.pop();
    	list.add(cur.val);
    	if (cur.right != null) {
    		s.push(cur.right);
    	}
    	if (cur.left != null) {
    		s.push(cur.left);
    	}
    }
    return list;
}
