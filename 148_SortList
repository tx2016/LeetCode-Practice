// 6/14/2017

Sort a linked list in O(n log n) time using constant space complexity.


public ListNode sortList(ListNode head) {
	if (head == null || head.next == null) {
            return head;
    }
    ListNode mid = findMid(head);
    ListNode right = sortList(mid.next);
    // need to set the end of mid to null
    // so the left end at mid
    mid.next = null;
    ListNode left = sortList(head);
    return merge(left, right);
}
// given two sorted arrays
// merge them into one sorted array
private ListNode merge(ListNode l1, ListNode l2) {
    ListNode dummy = new ListNode(0);
    ListNode cur = dummy;
    while (l1 != null && l2 != null) {
        if (l1.val < l2.val) {
            cur.next = l1;
            cur = cur.next;
            l1 = l1.next;
            cur.next = null;
        } else {
            cur.next = l2;
            cur = cur.next;
            l2 = l2.next;
            cur.next = null;
        }
    }
    if (l1 != null) {
        cur.next = l1;
    }
    if (l2 != null) {
        cur.next = l2;
    }
    return dummy.next;
}

private ListNode findMid(ListNode node) {
    ListNode dummy = new ListNode(0);
    dummy.next = node;
    ListNode fast = node;
    ListNode slow = dummy;

    while (fast != null && fast.next != null) {
        fast = fast.next.next;
        slow = slow.next;
    }
    return slow;
}