// 5/10/2017

Given an input string, reverse the string word by word.

For example,
Given s = "the sky is blue",
return "blue is sky the".

Update (2015-02-12):
For C programmers: Try to solve it in-place in O(1) space.

click to show clarification.

Clarification:
What constitutes a word?
A sequence of non-space characters constitutes a word.
Could the input string contain leading or trailing spaces?
Yes. However, your reversed string should not contain leading or trailing spaces.
How about multiple spaces between two words?
Reduce them to a single space in the reversed string.

public String reverseWords(String s) {
    if (s.length() == 0) {
        return "";
    }
    
    /** when space character is encountered
     * keep moving the pointer
     * 
     * if the result is not empty or non_space charater is encountered
     * only save the non_space character into the word
     * 
     * if the result is not empty and space character is encountered
     * append the reversed word to result
     * add a space in the result
     * clear the previous record in word
     * then save the new character to the word
     * 
     * when the loop exists, append the word into result
    
    
    */

    char[] ch = s.toCharArray();
    int end = ch.length - 1;
    StringBuilder sb_result = new StringBuilder();
    StringBuilder sb_word = new StringBuilder();
    boolean space_found = false;
    for (int i = end; i>=0; i--) {
        if (ch[i] != ' ') {
            // when space found && word not empty
            // append word to result
            if (!sb_word.toString().isEmpty() && space_found){
                sb_result.append(sb_word.reverse().toString());
                sb_result.append(" ");
                sb_word.setLength(0);
                sb_word.append(ch[i]);
            // if not space append to word
            // if word not empty, append to word
            } else {
                sb_word.append(ch[i]);
            }
            space_found = false;
        } else {
            space_found = true;
        }
    }
    sb_result.append(sb_word.reverse().toString());
    return sb_result.toString();
}