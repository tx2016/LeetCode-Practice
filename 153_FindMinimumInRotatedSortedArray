// 1/23/2017

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

You may assume no duplicate exists in the array.


public int findMin(int[] nums) {
	if (nums == null || nums.length == 0)
		return -1;
	if (nums.length == 1)
		return nums[0];

	int begin = 0;
	int end = nums.length - 1;

	while (begin + 1 < end) {
		int mid = begin + (end - begin)/2;
		if (nums[mid] < nums[end])
			end = mid;
		else
			begin = mid;
	}
	if (nums[end] > nums[begin])
   		return nums[begin];
    else
    	return nums[end];
}

// 5/30/2017

public int findMin(int[] nums) {
    if (nums.length == 0 || nums == null) {
        return -1;
    }
    int left = 0;
    int right = nums.length - 1;
    int target = nums[right];
    while (left + 1 < right) {
        int mid = left + (right-left)/2;
        int val = nums[mid];

        if (val >= target) {
            left = mid;
        } else {
            right = mid;
        }
    }
    if (nums[left] >= nums[right]) {
        return nums[right];
    } else {
        return nums[left];
    }
}