// 1/24/2017

Follow up for "Find Minimum in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

The array may contain duplicates.


public int findMin(int[] nums) {
	if (nums == null || nums.length == 0)
		return -1;
	if (nums.length == 1)
		return nums[0];

	int begin = 0;
	int end = nums.length - 1;


	// move the end pointer to the first duplicate from back
	while (end > 0 && nums[end] == nums[end - 1])
		end--;
	// move the begin pointer to the first duplicate from head
	while (begin < end && nums[begin] == nums[end])
		begin++;
		
	// after these two while loops, duplicated only exist between two pointers

    if (nums[begin] <= nums[end])
        return nums[begin];

	while (begin + 1 < end) {
		int mid = begin + (end - begin)/2;
		if (nums[mid] < nums[end])
			end = mid;
		else
			begin = mid;
	}
	if (nums[end] > nums[begin])
   		return nums[begin];
    else
    	return nums[end];
}