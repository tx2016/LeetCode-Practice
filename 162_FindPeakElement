// 2/8/2017

A peak element is an element that is greater than its neighbors.

Given an input array where num[i] ≠ num[i+1], find a peak element and return its index.

The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.

You may imagine that num[-1] = num[n] = -∞.

For example, in array [1, 2, 3, 1], 3 is a peak element and your function should return the index number 2.

public int findPeakElement(int[] nums) {
	if (nums == null || nums.length == 0)
		return -1;

	int begin = 0;
	int end = nums.length - 1;
	while (begin + 1 < end) {
		int mid = begin + (end - begin)/2;
		if (nums[mid] > nums[mid-1]) {
			begin = mid;
			if (nums[mid] > nums[mid+1])
				return mid;
		} else if (nums[mid] < nums[mid-1]) {
			end = mid;
		}

	}
	if (nums[begin] > nums[end])
		return begin;
	else
		return end;
}

// 4/12/2017
public int findPeakElement(int[] nums) {
    if (nums.length == 0) {
        return -1;
    }
    
    if (nums.length == 1) {
        return 0;
    }
    int left = 0;
    int right = nums.length-1;
    while (left + 1 < right) {
        int mid = left+(right-left)/2;
        int val = nums[mid];
        if (val > nums[mid-1]) {
            left = mid;
        } else if (val < nums[mid-1]) {
            right = mid;
        } else {
            right = mid;
        }
    }
    if (nums[left] > nums[right]) {
        return left;
    } else {
        return right;
    }
}

// 5/30/2017
public int findPeakElement(int[] nums) {
   if (nums.length == 0 || nums == null) {
        return -1;
    }
    int left = 0;
    int right = nums.length - 1;
    while (left + 1 < right) {
        int mid = left+(right-left)/2;
        int val = nums[mid];
        // smaller than the element behind
        // peak is in the right
        if (val < nums[mid + 1]) {
            left = mid; 
        // smaller than the element before
        // peak is in the left
        } else if (val < nums[mid - 1]){
            right = mid;
        // val >= nums[mid+1] && val >= nums[mid-1]
        } else {
            right = mid;
        }
    }
    if (nums[left] >= nums[right]) {
        return left;
    } else {
     return right;
    }
}