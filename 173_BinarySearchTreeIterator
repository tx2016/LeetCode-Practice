// 3/21/2017

Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST.

Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.

public class BSTIterator {
    Stack<TreeNode> s;
    TreeNode cur;
    public BSTIterator(TreeNode root) {
        s = new Stack<TreeNode>();
        cur = root;
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return (cur != null || !s.isEmpty());
    }

    /** @return the next smallest number */
    public int next() {
        while (cur != null) {
            s.push(cur);
            cur = cur.left;
        }
        TreeNode temp = s.pop();
        cur = temp.right;
        return temp.val;
    }
}

// 5/2/2017

// the idea is same as the binary tree in-order traversal
// left, self, right
public class BSTIterator {
    Stack<TreeNode> stack;
    TreeNode cur = null;
    
    // constructor
    public BSTIterator(TreeNode root) {
        stack = new Stack<>();
        cur = root;
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !stack.isEmpty() || cur != null;
    }

    /** @return the next smallest number */
    public int next() {
        while (cur != null) {
            stack.push(cur);
            cur = cur.left;
        }
        TreeNode temp = stack.pop();
        cur = temp.right;
        return temp.val;
    }
}



