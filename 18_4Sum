// 4/7/2017

Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

public List<List<Integer>> fourSum(int[] nums, int target) {
    List<List<Integer>> answer = new ArrayList<>();
    if (nums.length == 0) {
        return answer;
    }
    Arrays.sort(nums);
    for (int i = 0; i < nums.length - 3; i++) {
        if (i>=1 && nums[i-1] == nums[i]) {
            continue;
        }
        /* use a boolean to keep track of the j iteration
           in a case [-4, -1, -1, 0, 1, 2]
                           i  j   left  right
           when i first moves to position "1"
           j points to position "2", if only check nums[j-1] == nums[j]
           j will move to the right, so use a boolean to keep track of iteration j
           so j ONLY continue moving to the right, if this "j-1" was seen before
           where "new_j" is false


           or write
                if (j>=i+2 && nums[j-1] == nums[j]) {
                    continue;
                }

            becauase when j >= i + 2, j moves at least one time already, since
            j = i + 1. So when j = i + 2, j moves already.


        
        */

        boolean new_j = true;
        for (int j = i+1; j < nums.length - 2; j++) {
            if (!new_j && nums[j-1] == nums[j]) {
                continue;
            }
            new_j = false;
            int left = j + 1;
            int right = nums.length - 1;
            
            while (left < right) {
                int sum = nums[i] + nums[j] + nums[left] + nums[right];
                if (sum > target) {
                    right--;
                } else if (sum < target) {
                    left++;
                } else {
                    answer.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));
                    while (nums[left] == nums[left+1] && left + 1 < right) {
                        left++;
                    }
                    while (nums[right] == nums[right-1] && right - 1 > left) {
                        right--;
                    }
                    left++;
                    right--;
                }
            }
        }
    }
    return answer;
} 