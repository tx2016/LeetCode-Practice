// 3/16/2017

Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].

// recursive
public List<Integer> rightSideView(TreeNode root) {
	List<Integer> list = new ArrayList<Integer>();
    if (root == null) {
    	return list;
    }
    helper(root, list, 0);
    return list;
}

private void helper(TreeNode root, List<Integer> list, int depth) {
	if (root == null) {
		return;
	}
	if (depth == list.size()) {
		list.add(root.val);
	}
	helper(root.right, list, depth + 1);
	helper(root.left, list, depth + 1);
}

// iterative
public List<Integer> rightSideView(TreeNode root) {
	List<Integer> list = new ArrayList<Integer>();
	if (root == null) {
		return list;
	}
    LinkedList <TreeNode> q = new LinkedList<TreeNode>();
    q.offer(root);
    while (!q.isEmpty()) {
    	int size = q.size(); // record the size of the queue recorded last level, before moving to the next level
    	for (int i = 1; i <= size;i++) {
    		TreeNode cur = q.pop();
    		if (i == size) { // if the index of the current node equals to the size of the queue
    						 // meaning this is the right-most element in this level
    			list.add(cur.val);
    		}
    		if (cur.left != null) {
    			q.offer(cur.left);
    		}
    		if (cur.right != null) {
    			q.offer(cur.right);
    		}
    	}
    }    
    return list;
}