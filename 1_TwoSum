// 1/19/2017

Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].


// First attempt
public int[] TwoSum(int[] nums, int target) {
	if (nums == null)
		return null;

	// create a copy and sort
	int[] sorted = Arrays.copyOf(nums, nums.length);
	Arrays.sort(sorted);


	int [] targetNum = new int[2];
	int begin = 0;
	int end = nums.length - 1;
	while (end > begin) {
		if (sorted[begin] + sorted[end] > target)
			end--;
		else if (sorted[begin] + sorted[end] < target)
			begin++;
		else {
			targetNum[0] = sorted[begin];
			targetNum[1] = sorted[end];
			break;
		}
	}
	int[] answer = new int[2];
	for (int i = 0; i < nums.length; i++) {
		if (nums[i] == targetNum[0])
			answer[0] = i;
	}
	for (int i = nums.length -1 ; i > -1; i--) {
		if (nums[i] == targetNum[1])
			answer[1] = i;
	}
	
	return answer;
}

// Second Attempt
public int[] TwoSum(int[] nums, int target) {
	int [] answer = new int[2];
	Map<Integer, Integer> map = new HashMap<Integer, Integer>();
	for (int i = 0; i < nums.length; i++) {
		map.put(nums[i], i);
	}

	for (int i = 0; i < nums.length; i++) {
		int diff = target - nums[i];
		if (map.containsKey(diff) && map.get(diff) != i) {
			answer[0] = i;
			answer[1] = map.get(diff);
			break;
		}
	}
	return answer;
}



