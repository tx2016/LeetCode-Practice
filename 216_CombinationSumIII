// 5/22/2017

Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.


Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]

Example 2:

Input: k = 3, n = 9

Output:

[[1,2,6], [1,3,5], [2,3,4]]

public List<List<Integer>> combinationSum3(int k, int n) {
    List<List<Integer>> result = new ArrayList<>();
    int[] nums = {1,2,3,4,5,6,7,8,9};
    helper(result, new Stack<Integer>(), 0, nums, k, n, 0);
    return result;
}
private void helper(List<List<Integer>> result, Stack<Integer> stack, int start, int[] nums, int k, int n, int sum) {
    if (stack.size() == k && sum == n) {
        result.add(new ArrayList<Integer>(stack));
    }
    if (sum > n) {
        return;
    }
    for (int i = start; i < nums.length; i++) {
        stack.push(nums[i]);
        sum += nums[i];
        helper(result, stack, i+1, nums, k, n, sum);
        stack.pop();
        sum -= nums[i];
    }
}