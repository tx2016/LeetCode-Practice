// 3/11/2017

Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
    ListNode dummy = new ListNode(0);
    ListNode cur = dummy;
    if (l1 == null) {
    	return l2;
    }
    if (l2 == null) {
    	return l1;
    }
    if (l1 == null && l2 == null) {
    	return null;
    }
    while (l1 != null && l2 != null) {
    	if (l1.val < l2.val) {
    		cur.next = l1;
    		l1 = l1.next;
    		cur = cur.next;
    	} else {
    		cur.next = l2;
    		l2 = l2.next;
    		cur = cur.next;
    	}
    }
    if (l1 != null) {
    	cur.next = l1;
    }
	if (l2 != null) {
    	cur.next = l2;
    }
    return dummy.next;
}

// 5/25/2017

public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
    ListNode dummy = new ListNode(0);
    ListNode cur = dummy;
    while (l1 != null && l2 != null) {
        if (l1.val < l2.val) {
            cur.next = l1;
            l1 = l1.next;
        } else {
            cur.next = l2;
            l2 = l2.next;
        }
        cur = cur.next;
    }
    // the whole loop exists when l1 is null or l2 is null
    // if l1 is not null (l2 is null), point cur to l1
    // if l1 is null (l2 could be null or not null), point cur to l2
    
    // if there're any remaining elements in l1
    if (l1 != null) {
        cur.next = l1;
    } else { // no remaining in l1, l2 could be null or not null
        cur.next = l2;
    }
    return dummy.next;
}

// 6/6/2017
public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
    ListNode dummy = new ListNode(0);
    ListNode cur = dummy;
    while (l1 != null && l2 != null) {
        if (l1.val <= l2.val) {
            cur.next = l1;
            cur = cur.next;
            l1 = l1.next;
            cur.next = null;
        } else { //l2.val < l1.val
            cur.next = l2;
            cur = cur.next;
            l2 = l2.next;
            cur.next = null;
        }
    }
    if (l1 != null) {
        cur.next = l1;
    }
    if (l2 != null) {
        cur.next = l2;
    }
    return dummy.next;
}