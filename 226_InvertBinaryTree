// 3/16/2017

Invert a binary tree.

     4
   /   \
  2     7
 / \   / \
1   3 6   9
to
     4
   /   \
  7     2
 / \   / \
9   6 3   1

// recursive
public TreeNode invertTree(TreeNode root) {
    if (root == null) {
        return null;
    }
    TreeNode temp = root.left;
    root.left = invertTree(root.right);
    root.right = invertTree(temp);
    return root;
}

// iterative, BFS
public TreeNode invertTree (TreeNode root) {
	if (root == null) {
		return null;
	}
	LinkedList <TreeNode> q = new LinkedList<TreeNode>();
	q.offer(root);
	while (!q.isEmpty()) {
		TreeNode cur = q.poll();
		TreeNode temp = cur.left;
		cur.left = cur.right;
		cur.right = temp;
		if (cur.left != null) {
			q.offer(cur.left);
		}
		if (cur.right != null) {
			q.offer(cur.right);
		}
	}
	return root;
}