// 5/19/2017

Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. The algorithm should run in linear time and in O(1) space.


// Use Boyer-Moore voting algorithm

public List<Integer> majorityElement(int[] nums) {
    List<Integer> list = new ArrayList<>();
    if (nums.length == 0) {
        return list;
    }
    int num1 = Integer.MAX_VALUE; int num2 = Integer.MAX_VALUE; int count1 = 0; int count2 = 0 ;
    
    for (int val : nums) {
        if(val == num1)
            count1++;
        else if (val == num2)
            count2++;
        else if (count1 == 0) {
            num1 = val;
            count1++;
            }
        else if (count2 == 0) {
            num2 = val;
            count2++;
        }
        else {
            count1--;
            count2--;
        }
    }
    count1 = 0;
    count2 = 0;
    for(int val : nums) {
        if(val == num1)
            count1++;
        else if(val == num2)
            count2++;
    }
    if(count1 > nums.length/3)
        list.add(num1);
    if(count2 > nums.length/3)
        list.add(num2);

    return list;
}