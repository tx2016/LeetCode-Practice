// 5/1/2017

Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
"((()))",
"(()())",
"(())()",
"()(())",
"()()()"
]

public List<String> generateParenthesis(int n) {
    List<String> list = new ArrayList<>();
    helper(list, "", n, n);
    return list;
}
private void helper(List<String> list, String str, int left, int right) {
    if (left == 0 && right == 0) {
        list.add(str);
        return;
    }
    if (left > 0) {
        helper(list, str + "(", left - 1, right);
    }
    // add ")" only when the number of remaining ")" is greater
    // than that of "("
    if (right > left) {
        helper(list, str + ")", left, right - 1);
    }
}