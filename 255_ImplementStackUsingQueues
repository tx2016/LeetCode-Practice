// 4/4/2017

Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Notes:
You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).

public class MyStack {
    Queue<Integer> normal_q;
    Queue<Integer> temp_q;
    int top;
    /** Initialize your data structure here. */
    public MyStack() {
        normal_q = new LinkedList<>();
        temp_q = new LinkedList<>();
        top = Integer.MIN_VALUE;
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        top = x;
        normal_q.add(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        while (normal_q.size() > 1) {
            top = normal_q.remove();
            temp_q.add(top);
        }
        int pop = normal_q.remove();
        Queue<Integer> temp = normal_q;
        normal_q = temp_q;
        temp_q = temp;
        return pop;
    }
    
    /** Get the top element. */
    public int top() {
        return top;
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
        return normal_q.isEmpty();
    }
}