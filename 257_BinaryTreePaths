// 3/4/2017

Given a binary tree, return all root-to-leaf paths.

For example, given the following binary tree:

   1
 /   \
2     3
 \
  5
All root-to-leaf paths are:

["1->2->5", "1->3"]

public List<String> binaryTreePaths(TreeNode root) {
    List<String> list = new ArrayList<String>();
    
    if (root != null) {
        helper(root, list, "");
    }
    return list;
    
}

private void helper(TreeNode root, List<String> list, String path) {
    if (root.left == null && root.right == null) {
        list.add(path + root.val);
    }
    if (root.left!=null) {
        helper(root.left, list, (path + root.val + "->"));
    }
    if (root.right!=null) {
        helper(root.right, list, (path + root.val + "->"));
    }
}

// 5/2/2017

public List<String> binaryTreePaths(TreeNode root) {
    List<String> list = new ArrayList<>();
    if (root == null) {
        return list;
    }
    helper(root, "", list);
    return list;
}
private void helper(TreeNode root, String str, List<String> list) {
    if (root.left == null && root.right == null) {
        list.add(str + root.val);
    }
    if (root.left != null) {
        helper(root.left, str + root.val + "->", list);
    }
    if (root.right != null) {
        helper(root.right, str + root.val + "->", list);
    }
}

