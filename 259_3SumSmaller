// 4/7/2017

Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

For example, given nums = [-2, 0, 1, 3], and target = 2.

Return 2. Because there are two triplets which sums are less than 2:

[-2, 0, 1]
[-2, 0, 3]
Follow up:
Could you solve it in O(n2) runtime?


public int threeSumSmaller(int[] nums, int target) {
    int answer = 0;
    if (nums.length == 0) {
        return answer;
    }
    Arrays.sort(nums);
    for (int i = 0; i < nums.length - 2; i++) {
        int left = i+1;
        int right = nums.length-1;
        
        while (left < right) {
            int sum = nums[i]+nums[left]+nums[right];
            if (sum < target) {
                /* if [i, left, right] works, then [i, left+1, right-1] works
                   the number of elements between [left+1, right-1]
                   is (right-1) - (left+1) + 1 = right - left - 1
                   so including the count 1 at [i, left, right]
                   total workable number is right - left
                */
                answer += right - left;
                left++;
            } else {
                right--;
            }
        }
    }
    return answer;
}