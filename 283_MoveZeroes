// 4/7/2017

Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].

Note:
You must do this in-place without making a copy of the array.
Minimize the total number of operations.

public void moveZeroes(int[] nums) {
    if (nums.length == 0) {
        return;
    }
    
    int anchor = 0;
    for (int i = 0; i < nums.length; i++) {
        // if target found, continue moving
        // else set value at anchor as current value, anchor++
        if (nums[i] != 0) {
            nums[anchor] = nums[i];
            anchor++;
        }
    }
    int non_zero_len = anchor;
    while (non_zero_len < nums.length) {
        nums[non_zero_len] = 0;
        non_zero_len++;
    }
}

// 4/26/2017

public void moveZeroes(int[] nums) {
    int arrayLength = nums.length;
    int non_zero_idx = 0;
    for (int i = 0; i < arrayLength; i++) {
        if (nums[i] != 0) {
            nums[non_zero_idx] = nums[i];
            non_zero_idx++;
        }
    }
    for (int i = non_zero_idx; i < arrayLength; i++) {
        nums[i] = 0;
    }
}