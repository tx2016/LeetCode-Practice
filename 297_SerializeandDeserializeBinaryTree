// 6/3/2017

Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following tree

1
/ \
2   3
 / \
4   5
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.

// Encodes a tree to a single string.
public String serialize(TreeNode root) {
    if (root == null) {
        return "[]";
    }
    Queue<TreeNode> q = new LinkedList<>();
    String result = "";
    q.offer(root);
    result = "[";
    while (!q.isEmpty()) {
        TreeNode node = q.poll();
        if (node == null) {
            result = result + "#" + ",";
            // have to continue
            // because null does not have left or right
            // in line 38 - 39
            continue;
        } else {
            result += node.val + ",";
        }
        q.offer(node.left);
        q.offer(node.right);
    }
    // remove the last "," and append "}"
    result = result.substring(0, result.length()) + "]";
    return result;
}

// Decodes your encoded data to tree.
public TreeNode deserialize(String data) {
    if (data.equals("[]")) {
        return null;
    }
    // split the content between "{" and "}"
    String[] vals = data.substring(1, data.length()-1).split(",");
    Queue<TreeNode> q = new LinkedList<>();
    TreeNode result = new TreeNode(Integer.parseInt(vals[0]));
    q.offer(result);
    for (int i = 1; i < vals.length; i++) {
        TreeNode node = q.poll();
        String cur_left = vals[i];
        if (!cur_left.equals("#")) {
            TreeNode left = new TreeNode(Integer.parseInt(cur_left));
            node.left = left;
            q.offer(left);
        }
        // move to the potential right node
        i++;
        String cur_right = vals[i];
        if (!cur_right.equals("#")) {
            TreeNode right = new TreeNode(Integer.parseInt(cur_right));
            node.right = right;
            q.offer(right);
        }
    }
    return result;
}