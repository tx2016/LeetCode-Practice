// 4/25/2017

Given a non-empty array of integers, return the k most frequent elements.

For example,
Given [1,1,1,2,2,3] and k = 2, return [1,2].

Note: 
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

public List<Integer> topKFrequent(int[] nums, int k) {
    List<Integer> result = new ArrayList<>();
    HashMap<Integer, Integer> map = new HashMap<>();
    
    // in case all elements are the same, number of element == nums.length
    // thus the length of bucket should be (nums.length + 1)
    
    List<Integer>[] bucket = new List[nums.length + 1];
    for (int num : nums) {
        map.put(num, map.getOrDefault(num, 0) + 1);
    }
    for (int key : map.keySet()) {
        int freq = map.get(key);
        if (bucket[freq] == null) {
            bucket[freq] = new ArrayList();
        }
        bucket[freq].add(key);
    }
    for (int i = bucket.length-1; i >= 0; i--) {
        if (bucket[i] != null) {
            result.addAll(bucket[i]);
            if (result.size() == k) {
                break;
            }
        }
    }
    return result;
}