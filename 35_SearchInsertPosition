// 1/22/2017

Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0

public int searchInsert(int[] nums, int target) {
	if (nums == null)
		return -1;

	int answer = 0;
	int begin = 0;
	int end = nums.length - 1;
	while (begin + 1 < end) {
		int mid = begin + (end - begin)/2;
		if (nums[mid] < target) 
			begin = mid;
		else if (nums[mid] > target) 
			end = mid;
		else 
			end = mid; // move the end index, find first position
	}

	// check from begin first
	if (nums[begin] >= target) 
		answer = begin;
	else if (nums[end] >= target) 
		answer = end;
	else // (nums[end] < target)
		answer = end + 1;
	return answer;
}


// 4/9/2017
public int searchInsert(int[] nums, int target) {
    if (nums.length == 0) {
        return 0;
    }
    int left = 0;
    int right = nums.length - 1;
    while (left + 1 < right) {
        int mid = left + (right-left)/2;
        int num = nums[mid];
        if (num > target) {
            right = mid;
        } else if (num < target) {
            left = mid;
        } else {
            right = mid;
        }
    }
    if (nums[left] >= target) {
        return left;
    } else if (nums[right] < target) { 
        return (right + 1);
    } else { // nums[right] >= target
        return (left + 1);
    }
}