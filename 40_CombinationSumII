// 3/23/2017

Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
A solution set is: 
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]

public List<List<Integer>> combinationSum2(int[] candidates, int target) {
	List<List<Integer>> res = new ArrayList<List<Integer>>();
	if (candidates.length == 0) {
		return res;
	}
	Arrays.sort(candidates);
	helper(res, new ArrayList<Integer>(), candidates, target, 0, 0);
	return res;
}

private void helper(List<List<Integer>> res, List<Integer> list, int[] nums, int target, int start, int sum) {
	if (sum == target) {
		res.add(new ArrayList<Integer>(list));
	} 
	if (sum > target) {
		return;
	}
	for (int i = start; i < nums.length; i++) {
	    if (i > start && nums[i - 1] == nums[i]) {
	        continue; // same number found, go to the next 
	    }
		list.add(nums[i]);
		sum += nums[i];
		helper(res, list, nums, target, i + 1, sum);
		list.remove(list.size() - 1);
		sum -= nums[i];
	}
}

// 4/10/2017
public List<List<Integer>> combinationSum2(int[] candidates, int target) {
    List<List<Integer>> list = new ArrayList<>();
    Arrays.sort(candidates);
    helper(list, new ArrayList<>(), candidates, target, 0);
    return list;
}
private void helper(List<List<Integer>> list, List<Integer> tempList, int[] nums, int target, int start) {
    if (target < 0) {
        return;
    } else if (target == 0) {
        list.add(new ArrayList<>(tempList));
    } else {
        for (int i = start; i < nums.length; i++) {
            if (i > start && nums[i-1] == nums[i]) {
                continue;
            }
            tempList.add(nums[i]);
            helper(list, tempList, nums, target - nums[i], i + 1);
            tempList.remove(tempList.size()-1);
        }
    }
}