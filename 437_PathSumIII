// 3/6/2017

ou are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11


// Brute force attempt
public int pathSum(TreeNode root, int sum) {
    if (root == null) {
    	return 0;
    }
    int rootNumPath = helper(root, sum, 0);
    int leftNumPath = helper(root.left, sum, 0);
    int rightNumPath = helper(root.right, sum, 0);
    return (rootNumPath + leftNumPath + rightNumPath);
}

private int helper(TreeNode root, int sum, int curSum) {
	if (root == null) {
		return 0;
	}

	int numPath = 0;
	curSum += root.val;

	if (curSum == sum) {
		numPath++;
	}

	numPath += helper(root.left, sum, 0);
	numPath += helper(root.right, sum, 0);
	
	return numPath;
}





