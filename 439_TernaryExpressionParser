// 4/6/2017

Given a string representing arbitrarily nested ternary expressions, calculate the result of the expression. You can always assume that the given expression is valid and only consists of digits 0-9, ?, :, T and F (T and F represent True and False respectively).

Note:

The length of the given string is â‰¤ 10000.
Each number will contain only one digit.
The conditional expressions group right-to-left (as usual in most languages).
The condition will always be either T or F. That is, the condition will never be a digit.
The result of the expression will always evaluate to either a digit 0-9, T or F.
Example 1:

Input: "T?2:3"

Output: "2"

Explanation: If true, then result is 2; otherwise result is 3.
Example 2:

Input: "F?1:T?4:5"

Output: "4"

Explanation: The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:

             "(F ? 1 : (T ? 4 : 5))"                   "(F ? 1 : (T ? 4 : 5))"
          -> "(F ? 1 : 4)"                 or       -> "(T ? 4 : 5)"
          -> "4"                                    -> "4"
Example 3:

Input: "T?T?F:5:3"

Output: "F"

Explanation: The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:

             "(T ? (T ? F : 5) : 3)"                   "(T ? (T ? F : 5) : 3)"
          -> "(T ? F : 3)"                 or       -> "(T ? F : 5)"
          -> "F"                                    -> "F"



public String parseTernary(String expression) {
    if (expression.length() == 0 || expression == null) {
        return "";
    }
    Stack<Character> stack = new Stack<>();
    for (int i = expression.length() - 1; i > -1; i--) {
        char ch = expression.charAt(i);
        // when the current ch is 'T' or 'F', the top of stack is '?'
        // since T?2:3
        if (!stack.isEmpty() && stack.peek() == '?') {
            stack.pop(); // remove the '?'
            char left = stack.pop();
            stack.pop(); // remove the ':'
            char right = stack.pop();
            
            if (ch == 'T') {
                stack.push(left);
            } else if (ch == 'F') {
                stack.push(right);
            }
            
        } else {
            stack.push(ch);
        }
    }
    return Character.toString(stack.peek());
}