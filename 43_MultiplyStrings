// 5/6/2017

Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2.

Note:

The length of both num1 and num2 is < 110.
Both num1 and num2 contains only digits 0-9.
Both num1 and num2 does not contain any leading zero.
You must not use any built-in BigInteger library or convert the inputs to integer directly.


public String multiply(String num1, String num2) {
    int len1 = num1.length();
    int len2 = num2.length();
    
    int[] result = new int[len1 + len2];
    for (int i = len1 - 1; i >= 0; i--) {
        for (int j = len2 - 1; j >= 0;j--) {
            int digit1 = num1.charAt(i) - '0';
            int digit2 = num2.charAt(j) - '0';
            result[i + j + 1] += digit1 * digit2;
        }
    }
    int carry = 0;
    for (int i = result.length - 1; i >= 0; i--) {
        int digit = (result[i] + carry) % 10;
        carry = (result[i] + carry) / 10;
        result[i] = digit;
    }
    StringBuilder sb = new StringBuilder();
    for (int num : result) {
        sb.append(num);
    }
    // delete the leading 0
    // ex. "1111" and "0" -> "0000"
    while (sb.length() != 0 && sb.charAt(0) == '0') {
        sb.deleteCharAt(0);
    }
    
    if (sb.length() == 0) {
        return "0";
    } else {
        return sb.toString();
    }
}za