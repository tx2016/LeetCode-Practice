// 5/11/2017

Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.

Example 1:
Input: "abab"

Output: True

Explanation: It's the substring "ab" twice.
Example 2:
Input: "aba"

Output: False
Example 3:
Input: "abcabcabcabc"

Output: True

Explanation: It's the substring "abc" four times. (And the substring "abcabc" twice.)


public boolean repeatedSubstringPattern(String s) {
    if (s.length() == 0) {
        return true;
    }
    char[] ch = s.toCharArray();
    // when 
    for (int i = ch.length/2; i >= 1; i--) {
        // i has to be greater than 1
        // since i is the denominator
        
        // when i is divisible by length of array
        // ex. len = 9
        // i starting at 4
        // when i = 3, 9 % 3 = 0, 9 / 3 = 3
        if (ch.length % i == 0) {
            int num_block = ch.length / i;
            String subStr = s.substring(0, i);
            int j;
            for (j = 1; j < num_block; j++) {
                String blockStr = s.substring(j*i, j*i + i);
                if (!subStr.equals(blockStr)) {
                    break;
                }
            }
            if (j == num_block) {
                return true;
            }
        }
    }
    return false;
}