// 3/22/2017

Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

public List<List<Integer>> permute(int[] nums) {
    if (nums.length == 0) {
        return new ArrayList<List<Integer>>();
    }
    List<List<Integer>> res = new ArrayList<List<Integer>>();
    Arrays.sort(nums);
    helper(res, new ArrayList<Integer>(), nums);
    return res;
}

private void helper(List<List<Integer>> res, List<Integer> list, int[] nums) {
    if (list.size() == nums.length) {
        res.add(new ArrayList<Integer>(list));
    } else {
        for (int i = 0; i < nums.length; i++) {
            if (list.contains(nums[i])) {
                continue; // duplicate found, go to the next element
            }
            list.add(nums[i]);
            helper(res, list, nums);
            list.remove(list.size() - 1);
        }
    }
}