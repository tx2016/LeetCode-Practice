// 3/22/2017

Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]

public List<List<Integer>> permuteUnique(int[] nums) {
	if (nums.length == 0) {
    	return new ArrayList<List<Integer>>();
    }
    List<List<Integer>> res = new ArrayList<List<Integer>>();
    Arrays.sort(nums);
    helper(res, new ArrayList<Integer>(), nums, new boolean[nums.length]);
    return res;
}

private void helper(List<List<Integer>> res, List<Integer> list, int[] nums, boolean[] used) {
	if (list.size() == nums.length) {
    	res.add(new ArrayList<Integer>(list));
    } else {
    	for (int i = 0; i < nums.length; i++) {
            if (used[i] || i > 0 && nums[i - 1] == nums[i] && !used[i - 1]) {
                continue; // if the previous same element is not picked, go to the next element
            }
            used[i] = true;
            list.add(nums[i]);
            helper(res, list, nums, used);
            list.remove(list.size() - 1);
            used[i] = false;
        }
    }
}

// 5/22/2017
public List<List<Integer>> permuteUnique(int[] nums) {
    List<List<Integer>> result = new ArrayList<>();
    Set<Integer> visited = new HashSet<>();
    Arrays.sort(nums);
    helper(result, new Stack<Integer>(), visited, nums);
    return result;
}
private void helper(List<List<Integer>> result, Stack<Integer> stack, Set<Integer> visited, int[] nums) {
    if (stack.size() == nums.length) {
        result.add(new ArrayList<Integer>(stack));
    }
    for (int i = 0; i < nums.length; i++) {
        // if not using visited.contains(i), will have stackoverflow error
        // because the for loop will always initialize i as 0
        // in permuatation problem, i will always starts from 0
        // so using only i != 0 is not enough in the parse condition
        if (visited.contains(i) || i != 0 && nums[i-1] == nums[i] && !visited.contains(i - 1)) {
            continue;
        }
        stack.push(nums[i]);
        visited.add(i);
        helper(result, stack, visited, nums);
        stack.pop();
        visited.remove(i);
    }
}