// 2/9/2017

There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5

public double findMedianSortedArrays(int[] nums1, int[] nums2) {
    int m = nums1.length;
	int n = nums2.length;


	// make sure n > m for processing
	if (m > n)
		return findMedianSortedArrays(nums2, nums1);

	int begin = 0;
	int end = m;
	int half_len = (m + n + 1)/2;
	int i = 0;
	int j = 0;
	double max_left = 0.0;
	double min_right = 0.0;

	while (begin <= end) {
		i = begin + (end - begin)/2;
		j = half_len - i;

		if (j >=1 && i < m && nums2[j - 1] > nums1[i])
			begin = i+1;
		else if (i>=1 && j < n && nums1[i - 1] > nums2[j])
			end = i-1;
	    else {
        	
    		if (i == 0)
    			max_left = nums2[j - 1];
    		else if (j == 0)
    			max_left = nums1[i - 1];
    		else
    			max_left = Math.max(nums1[i - 1], nums2[j - 1]);
    		break;
	    }
	}
	// if total length is odd, the maximum exists in the left part
	if ((m + n) % 2 == 1)
		return max_left;

	if (i == m)
		min_right = (double) nums2[j];
	else if (j == n)
		min_right = (double) nums1[i];
	else
		min_right = (double) Math.min(nums1[i], nums2[j]);

	return ((double) (max_left + min_right) / 2);
}