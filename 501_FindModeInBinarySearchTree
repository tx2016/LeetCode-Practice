// 3/6/2017

Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than or equal to the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.
For example:
Given BST [1,null,2,2],
   1
    \
     2
    /
   2
return [2].

Note: If a tree has more than one mode, you can return them in any order.

Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).


HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
int max = 0;

public int[] findMode(TreeNode root) {
	if (root == null) {
		return new int[0];
	}

	
	helper(root);
	List<Integer> list = new ArrayList<Integer> ();


	for (int key: map.keySet()) {
		if (map.get(key) == max) {
			list.add(key);
		}
	}

	int[] result = new int[list.size()];
	for (int i = 0; i < result.length; i++) {
		result[i] = list.get(i);
	}
	return result;
}

private void helper(TreeNode root) {
	map.put(root.val, map.getOrDefault(root.val, 0)+1);
	max = Math.max(max, map.get(root.val));
	if (root.left != null) {
		helper(root.left);
	}
	if (root.right != null) {
		helper(root.right);
	}
}

