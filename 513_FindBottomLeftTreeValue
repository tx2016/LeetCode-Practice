// 3/20/2017

Given a binary tree, find the leftmost value in the last row of the tree.

Example 1:
Input:

    2
   / \
  1   3

Output:
1
Example 2: 
Input:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

Output:
7
Note: You may assume the tree (i.e., the given root node) is not NULL.


// recursive
private int res = 0;
private int cur_depth = 0;

public int findBottomLeftValue(TreeNode root) {
    helper(root, 1);
    return res;
}

private void helper(TreeNode root, int depth) {
	if (depth > cur_depth) {
		res = root.val;
		cur_depth = depth;
	}
	if (root.left != null) {
		helper(root.left, depth + 1);
	}
	if (root.right != null) {
		helper(root.right, depth + 1);
	}
}


// iterative
public int findBottomLeftValue(TreeNode root)  {
    LinkedList <TreeNode> q = new LinkedList<TreeNode>();
    int res = 0;
    q.offer(root);
    while (!q.isEmpty()) {
    	int size = q.size(); // record the size of the queue recorded last level, before moving to the next level
    	for (int i = 0; i < size;i++) {
    		TreeNode cur = q.poll();
    		if (i == 0) { // if the index of the current node equals to 0
    						 // meaning this is the left-most element in this level
    			res = cur.val;
    		}
    		if (cur.left != null) {
    			q.offer(cur.left);
    		}
    		if (cur.right != null) {
    			q.offer(cur.right);
    		}
    	}
    }    
    return res;
}
