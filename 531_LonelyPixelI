// 4/9/2017

Given a picture consisting of black and white pixels, find the number of black lonely pixels.

The picture is represented by a 2D char array consisting of 'B' and 'W', which means black and white pixels respectively.

A black lonely pixel is character 'B' that located at a specific position where the same row and same column don't have any other black pixels.

Example:
Input: 
[['W', 'W', 'B'],
 ['W', 'B', 'W'],
 ['B', 'W', 'W']]

Output: 3
Explanation: All the three 'B's are black lonely pixels.
Note:
The range of width and height of the input 2D array is [1,500].

public int findLonelyPixel(char[][] picture) {
    int row = picture.length;
    int col = picture[0].length;
    int counter = 0;
    int[] row_counter = new int[row];
    int[] col_counter = new int[col];
    
    
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            if (picture[i][j] == 'B') {
                row_counter[i]++;
                col_counter[j]++;
            }
        }
    }
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            if (picture[i][j] == 'B' && row_counter[i] == 1 && col_counter[j] == 1) {
                counter++;
            }
        }
    }
    return counter;
}