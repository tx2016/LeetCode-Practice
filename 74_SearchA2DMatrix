// 1/22/2017

Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.


public boolean searchMatrix (int[][] matrix, int target) {
	if (matrix == null || matrix.length == 0 || matrix[0].length == 0)
		return false;

	int numRow = matrix.length;
	int numCol = matrix[0].length;
	int begin = 0;
	int end = numRow * numCol - 1;
	while (begin + 1 < end) {
		int mid = begin + (end - begin)/2;
		int mid_value = matrix[mid/numCol][mid%numCol];
		if (mid_value < target)
			begin = mid;
		else if (mid_value > target)
			end = mid;
		else
			end = mid;
	}
	if (matrix[begin/numCol][begin%numCol] == target)
		return true;
	else if (matrix[end/numCol][end%numCol] == target)
		return true;
	else
		return false;
}


// 3/15/2017

public boolean searchMatrix(int[][] matrix, int target) {
    if (matrix == null || matrix.length == 0 || matrix[0].length == 0)
		return false;

	int numRow = matrix.length;
	int numCol = matrix[0].length;
	
	int row = numRow - 1;
	int col = 0;
	
	// start from the left bottom corner
	while (row >= 0 && col < numCol) {
	    if (matrix[row][col] > target) {
	        row--;
	    } else if (matrix[row][col] < target) {
	        col++;
	    } else {
	        return true;
	    }
	}
	return false;
}




