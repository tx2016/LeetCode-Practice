// 4/10/2017

Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Write a function to determine if a given target is in the array.

The array may contain duplicates.

public boolean search(int[] nums, int target) {
    if (nums.length == 0) {
        return false;
    }
    int left = 0;
    int right = nums.length - 1;
    while (left + 1 < right) {
        int mid = left + (right-left)/2;
        int val = nums[mid];
                
        if (val > nums[left]) { // in left part
            if (target >= nums[left] && target <= val) { // target in left part
                right = mid;
            } else { // target in right part
                left = mid;
            }
        } else if (val < nums[left]){ // in right part
            if (target <= nums[right] && target >= val) { // target in right part
                left = mid;
            } else {
                right = mid;
            }
        } else { // val == nums[left] means, duplicates
            left++;
        }
    }
    if (nums[left] == target) {
        return true;
    } else if (nums[right] == target){
        return true;
    } else {
        return false;
    }
}