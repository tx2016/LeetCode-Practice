// 3/16/2017

Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree [1,null,2,3],
   1
    \
     2
    /
   3
return [1,3,2].

Note: Recursive solution is trivial, could you do it iteratively?

// recursive
public List<Integer> inorderTraversal(TreeNode root) {
    List<Integer> list = new ArrayList<Integer>();
    if (root == null) {
        return list;
    }
    helper(root, list);
    return list;
}

private void helper(TreeNode root, List<Integer> list) {
    if (root == null) {
        return;
    }
    
    helper(root.left, list);
    list.add(root.val);
    helper(root.right, list);
}

// iterative
public List<Integer> inorderTraversal(TreeNode root) {
    List<Integer> list = new ArrayList<Integer>();
    if (root == null) {
		return list;
	}
    Stack <TreeNode> s = new Stack<TreeNode>();
    TreeNode cur = root;

    while (cur != null || !s.isEmpty()) {
    	while (cur != null) {
    		s.push(cur);
    		cur = cur.left;
    	}
    	cur = s.pop();
    	list.add(cur.val);
    	cur = cur.right;
    }
    return list;
}

// 6/1/2017
public List<Integer> inorderTraversal(TreeNode root) {
    List<Integer> result = new ArrayList<Integer>();
    Stack <TreeNode> stack = new Stack<TreeNode>();
    if (root == null) {
        return result;
    }
    while (root != null || !stack.isEmpty()) {
        if (root != null) {
            stack.push(root);
            root = root.left;
        } else {
            root = stack.pop();
            result.add(root.val);
            root = root.right;
        }
    }
    return result;
}