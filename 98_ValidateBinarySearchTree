// 3/18/2017

Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:
    2
   / \
  1   3
Binary tree [2,1,3], return true.
Example 2:
    1
   / \
  2   3
Binary tree [1,2,3], return false.



public boolean isValidBST(TreeNode root) {
	 if (root == null) {
	 	return true;
	 }
	 long min = Long.MIN_VALUE;
	 long max = Long.MAX_VALUE;
	 return helper(root, min, max);
}

private boolean helper(TreeNode root, long min, long max) {
    if (root == null) {
        return true;
    }
    
	if (root.val <= min || root.val >= max) {
	    return false;
	}
	
	return helper(root.left, min, root.val) && helper(root.right, root.val, max);
}